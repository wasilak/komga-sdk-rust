/*
 * Komga API
 *
 * Komga REST API.  ## Reference  Check the API reference: - on the [Komga website](https://komga.org/docs/openapi/komga-api) - on any running Komga instance at `/swagger-ui.html` - on [GitHub](https://raw.githubusercontent.com/gotson/komga/refs/heads/master/komga/docs/openapi.json)  ## Authentication  Most endpoints require authentication. Authentication is done using either: - Basic Authentication - Passing an API Key in the `X-API-Key` header  ## Sessions  Upon successful authentication, a session is created, and can be reused.  - By default, a `KOMGA-SESSION` cookie is set via `Set-Cookie` response header. This works well for browsers and clients that can handle cookies. - If you specify a header `X-Auth-Token` during authentication, the session ID will be returned via this same header. You can then pass that header again for subsequent requests to reuse the session.  If you need to set the session cookie later on, you can call `/api/v1/login/set-cookie` with `X-Auth-Token`. The response will contain the `Set-Cookie` header.  ## Remember Me  During authentication, if a request parameter `remember-me` is passed and set to `true`, the server will also return a `komga-remember-me` cookie. This cookie will be used to login automatically even if the session has expired.  ## Logout  You can explicitly logout an existing session by calling `/api/logout`. This would return a `204`.  ## Deprecation  API endpoints marked as deprecated will be removed in the next major version.
 *
 * The version of the OpenAPI document: 1.23.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SeriesMetadataDto {
    #[serde(rename = "ageRating", skip_serializing_if = "Option::is_none")]
    pub age_rating: Option<i32>,
    #[serde(rename = "ageRatingLock")]
    pub age_rating_lock: bool,
    #[serde(rename = "alternateTitles")]
    pub alternate_titles: Vec<models::AlternateTitleDto>,
    #[serde(rename = "alternateTitlesLock")]
    pub alternate_titles_lock: bool,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "genres")]
    pub genres: Vec<String>,
    #[serde(rename = "genresLock")]
    pub genres_lock: bool,
    #[serde(rename = "language")]
    pub language: String,
    #[serde(rename = "languageLock")]
    pub language_lock: bool,
    #[serde(rename = "lastModified")]
    pub last_modified: String,
    #[serde(rename = "links")]
    pub links: Vec<models::WebLinkDto>,
    #[serde(rename = "linksLock")]
    pub links_lock: bool,
    #[serde(rename = "publisher")]
    pub publisher: String,
    #[serde(rename = "publisherLock")]
    pub publisher_lock: bool,
    #[serde(rename = "readingDirection")]
    pub reading_direction: String,
    #[serde(rename = "readingDirectionLock")]
    pub reading_direction_lock: bool,
    #[serde(rename = "sharingLabels")]
    pub sharing_labels: Vec<String>,
    #[serde(rename = "sharingLabelsLock")]
    pub sharing_labels_lock: bool,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "statusLock")]
    pub status_lock: bool,
    #[serde(rename = "summary")]
    pub summary: String,
    #[serde(rename = "summaryLock")]
    pub summary_lock: bool,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    #[serde(rename = "tagsLock")]
    pub tags_lock: bool,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "titleLock")]
    pub title_lock: bool,
    #[serde(rename = "titleSort")]
    pub title_sort: String,
    #[serde(rename = "titleSortLock")]
    pub title_sort_lock: bool,
    #[serde(rename = "totalBookCount", skip_serializing_if = "Option::is_none")]
    pub total_book_count: Option<i32>,
    #[serde(rename = "totalBookCountLock")]
    pub total_book_count_lock: bool,
}

impl SeriesMetadataDto {
    pub fn new(age_rating_lock: bool, alternate_titles: Vec<models::AlternateTitleDto>, alternate_titles_lock: bool, created: String, genres: Vec<String>, genres_lock: bool, language: String, language_lock: bool, last_modified: String, links: Vec<models::WebLinkDto>, links_lock: bool, publisher: String, publisher_lock: bool, reading_direction: String, reading_direction_lock: bool, sharing_labels: Vec<String>, sharing_labels_lock: bool, status: String, status_lock: bool, summary: String, summary_lock: bool, tags: Vec<String>, tags_lock: bool, title: String, title_lock: bool, title_sort: String, title_sort_lock: bool, total_book_count_lock: bool) -> SeriesMetadataDto {
        SeriesMetadataDto {
            age_rating: None,
            age_rating_lock,
            alternate_titles,
            alternate_titles_lock,
            created,
            genres,
            genres_lock,
            language,
            language_lock,
            last_modified,
            links,
            links_lock,
            publisher,
            publisher_lock,
            reading_direction,
            reading_direction_lock,
            sharing_labels,
            sharing_labels_lock,
            status,
            status_lock,
            summary,
            summary_lock,
            tags,
            tags_lock,
            title,
            title_lock,
            title_sort,
            title_sort_lock,
            total_book_count: None,
            total_book_count_lock,
        }
    }
}

